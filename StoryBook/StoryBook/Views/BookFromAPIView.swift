//
//  BookFromAPIView.swift
//  StoryBook
//
//  Created by ayu on 2025/10/16.
//

import SwiftUI
import Combine

// MARK: - API„Åã„ÇâÂèñÂæó„Åó„ÅüÁµµÊú¨„Éá„Éº„Çø„ÇíË°®Á§∫„Åô„Çã„Éì„É•„Éº

/// API„Åã„ÇâÂèñÂæó„Åó„ÅüÁµµÊú¨„Éá„Éº„Çø„ÇíË°®Á§∫„Åô„Çã„Éì„É•„Éº„ÅÆÂÖ±ÈÄö„É≠„Ç∏„ÉÉ„ÇØ
@available(iOS 15.0, macOS 12.0, *)
class BookFromAPIViewModel: ObservableObject {
    // „ÉÜ„Çπ„ÉàÁî®„Å´ID=1„Å´Âõ∫ÂÆö
    private let storybookId: Int = 1
    @Published private var storybookService = StorybookService.shared
    @Published var storybook: StorybookResponse?
    @Published var story: Story?
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var isGeneratingImages = false
    @Published var generationMessage = "ÁµµÊú¨„ÅÆÁµµ„ÇíÊèè„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
    
    // „Çø„Ç§„Éà„É´Êõ¥Êñ∞„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÔºà„Ç™„Éó„Ç∑„Éß„Éä„É´Ôºâ
    var onTitleUpdate: ((String) -> Void)?
    
    init(onTitleUpdate: ((String) -> Void)? = nil) {
        self.onTitleUpdate = onTitleUpdate
    }
    
    // „Çø„Ç§„Éà„É´„ÇíÂ§ñÈÉ®„Åã„ÇâÂèñÂæó„Åß„Åç„Çã„Çà„ÅÜ„Å´ÂÖ¨Èñã
    var storyTitle: String {
        storybook?.title ?? "ÁµµÊú¨„ÇíË™≠„ÅøËæº„Åø‰∏≠..."
    }
    
    /// ÁµµÊú¨„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
    func loadStorybook() async {
        DispatchQueue.main.async {
            self.isLoading = true
            self.errorMessage = nil
        }
        
        do {
            print("üìö Loading storybook with ID: \(storybookId)")
            
            let response = try await storybookService.fetchStorybook(storybookId: storybookId)
            
            DispatchQueue.main.async {
                self.storybook = response
                self.story = Story(from: response)
                
                // „Çø„Ç§„Éà„É´„ÇíÊõ¥Êñ∞
                self.onTitleUpdate?(response.title)
                
                print("‚úÖ Storybook loaded successfully")
                print("üìñ Title: \(response.title)")
                print("üìÑ Number of pages: \(self.story?.pages.count ?? 0)")
                print("üñºÔ∏è Image generation status: \(response.imageGenerationStatus)")
                
                // ÁîªÂÉèÁîüÊàêÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                if self.storybookService.isGeneratingImages(response) {
                    self.isGeneratingImages = true
                    self.generationMessage = self.storybookService.getGenerationMessage(response.imageGenerationStatus)
                    
                    // ÁîªÂÉèÁîüÊàê„ÅÆÈÄ≤Êçó„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
                    self.simulateImageGenerationProgress()
                }
                
                self.isLoading = false
            }
            
        } catch {
            DispatchQueue.main.async {
                print("‚ùå Error loading storybook: \(error)")
                self.errorMessage = error.localizedDescription
                self.onTitleUpdate?("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
                self.isLoading = false
            }
        }
    }
    
    /// ÁîªÂÉèÁîüÊàê„ÅÆÈÄ≤Êçó„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
    private func simulateImageGenerationProgress() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            self.generationMessage = "ÁµµÊú¨„ÅÆÁµµ„ÇíÊèè„ÅÑ„Å¶„ÅÑ„Åæ„Åô... (50%)"
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
            self.generationMessage = "ÁµµÊú¨„ÅÆÁµµ„ÇíÊèè„ÅÑ„Å¶„ÅÑ„Åæ„Åô... (90%)"
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 6) {
            self.generationMessage = "ÁµµÊú¨„ÅåÂÆåÊàê„Åó„Åæ„Åó„ÅüÔºÅ"
            self.isGeneratingImages = false
            
            // ÂÆå‰∫ÜÂæå„Å´„Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø
            Task {
                await self.loadStorybook()
            }
        }
    }
    
    /// Story„Åã„ÇâBook„Éö„Éº„Ç∏„Çí‰ΩúÊàê
    func createBookPages(from story: Story) -> [AnyView] {
        return story.pages.map { page in
            if let imageURLString = page.imageURL,
               let imageURL = URL(string: imageURLString) {
                // „É™„É¢„Éº„ÉàÁîªÂÉè„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºà‰ΩôÁôΩ„Å™„ÅóÔºâ
                return AnyView(
                    BookRemoteImagePage(
                        imageURL,
                        contentInset: 0,
                        fit: .fill,
                        text: page.text,
                        textAreaHeight: 120
                    )
                )
            } else {
                // ÁîªÂÉè„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÉÜ„Ç≠„Çπ„Éà„ÅÆ„Åø
                return AnyView(
                    VStack(spacing: 0) {
                        Text(page.text)
                            .font(.body)
                            .multilineTextAlignment(.center)
                            .padding(.horizontal, 20)
                            .lineSpacing(4)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .top)
                    .background(Color.white)
                )
            }
        }
    }
}

/// API„Åã„ÇâÂèñÂæó„Åó„ÅüÁµµÊú¨„Éá„Éº„Çø„ÇíË°®Á§∫„Åô„Çã„Éì„É•„Éº
@available(iOS 15.0, macOS 12.0, *)
public struct BookFromAPI: View {
    @StateObject private var viewModel = BookFromAPIViewModel()
    
    public init() {}
    
    public var body: some View {
        BookFromAPIView(viewModel: viewModel)
    }
}

/// „Çø„Ç§„Éà„É´Êõ¥Êñ∞„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ‰ªò„Åç„ÅÆBookFromAPI
@available(iOS 15.0, macOS 12.0, *)
public struct BookFromAPIWithTitleUpdate: View {
    @StateObject private var viewModel: BookFromAPIViewModel
    
    public init(onTitleUpdate: @escaping (String) -> Void) {
        self._viewModel = StateObject(wrappedValue: BookFromAPIViewModel(onTitleUpdate: onTitleUpdate))
    }
    
    public var body: some View {
        BookFromAPIView(viewModel: viewModel)
    }
}

/// ÂÖ±ÈÄö„ÅÆ„Éì„É•„ÉºÂÆüË£Ö
@available(iOS 15.0, macOS 12.0, *)
private struct BookFromAPIView: View {
    @ObservedObject var viewModel: BookFromAPIViewModel
    
    var body: some View {
        ZStack {
            if viewModel.isLoading {
                // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢
                VStack(spacing: 20) {
                    ProgressView()
                        .scaleEffect(1.5)
                    Text("ÁµµÊú¨„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô...")
                        .font(.headline)
                        .foregroundColor(.primary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else if let errorMessage = viewModel.errorMessage {
                // „Ç®„É©„ÉºÁîªÈù¢
                VStack(spacing: 20) {
                    Image(systemName: "exclamationmark.triangle")
                        .font(.system(size: 50))
                        .foregroundColor(.orange)
                    Text("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
                        .font(.title2)
                        .fontWeight(.semibold)
                        .foregroundColor(.primary)
                    Text(errorMessage)
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                    
                    Button("ÂÜçË©¶Ë°å") {
                        Task {
                            await viewModel.loadStorybook()
                        }
                    }
                    .buttonStyle(.borderedProminent)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else if let story = viewModel.story {
                // ÁµµÊú¨Ë°®Á§∫ÁîªÈù¢
                VStack {
                    if viewModel.isGeneratingImages {
                        // ÁîªÂÉèÁîüÊàê‰∏≠„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
                        VStack(spacing: 12) {
                            ProgressView()
                                .scaleEffect(1.2)
                            Text(viewModel.generationMessage)
                                .font(.headline)
                                .foregroundColor(.primary)
                        }
                        .padding()
                        .background(Color.secondary.opacity(0.1))
                        .cornerRadius(12)
                        .padding(.top, 20)
                    }
                    
                    // ÁµµÊú¨„Ç≥„É≥„ÉÜ„É≥„ÉÑ
                    Book(
                        pages: viewModel.createBookPages(from: story),
                        title: story.title,
                        showTitle: false,
                        heightRatio: 0.9,
                        aspectRatio: 10/16.0,
                        cornerRadius: 16,
                        paperColor: Color(red: 252/255, green: 252/255, blue: 252/255)
                    )
                    .opacity(viewModel.isGeneratingImages ? 0.7 : 1.0)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else {
                // ÂàùÊúüÁä∂ÊÖã
                VStack(spacing: 20) {
                    Image(systemName: "book.closed")
                        .font(.system(size: 50))
                        .foregroundColor(.primary)
                    Text("ÁµµÊú¨„ÇíË™≠„ÅøËæº„Åø‰∏≠...")
                        .font(.headline)
                        .foregroundColor(.primary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
        }
        .task {
            await viewModel.loadStorybook()
        }
        .refreshable {
            await viewModel.loadStorybook()
        }
    }
}
